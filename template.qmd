---
title: "Quarto example"
subtitle: "Draft analysis"
author: "Emile Latour"
date: '`r Sys.Date()`'
author-title: "By"
published-title: "Date"
toc: true
toc-depth: 2
format:
  html:
    # theme: yeti
    link-external-newwindow: true
    toc-location: left
    number-sections: true
    code-tools: true
    code-fold: true
    self-contained: true
  # pdf: default
execute:
  echo: false
  freeze: auto  # re-render only when source changes
# editor: visual
editor_options:
  chunk_output_type: console
---

```{css, echo = FALSE}
.justify {
  text-align: justify !important
}
```

::: {.justify}

```{r}
#| label: "setup"
#| include: false


#### Global chunk options -----------------------------

knitr::opts_chunk$set(
  eval       = TRUE,      # whether to run code in code chunk
  include    = TRUE,      # whether to include the chunk output
  # echo       = FALSE,   # Whether to show code chunk in final output
  error      = TRUE,      # whether to display error messages
  message    = FALSE,     # whether to preserve messages
  warning    = FALSE,     # whether to preserve warnings
  comment    = NA,        # a character string to append at start of each line of 
                          # results in final document
  tidy       = FALSE,     # whether to tidy code chunks for display
  dpi        = 150,       # dots per inch in graphics when applicable
  fig.width  = 8,         # consistent width for figures
  fig.asp    = 0.618,     # the golden ratio, can be adjusted in individual chunks
  out.width  = "100%",    # controls the output size
  fig.align  = "center",  # give plot room to breathe
  # fig.path   = "figures/somedir/"  # file path to store plots
  NULL
)


#### Other options --------------------------------

## Scientific notation ---------------
# Turn off scientific notation
options(scipen = 999)


#### Packages --------------------------------------
# Load the packages to be used.

## Define the repository for packages ----------------
options(repos = c(CRAN = "https://cran.rstudio.com"))

## universally useful packages ----------------
# if (!require("pacman")) {install.packages("pacman")}
# if (!require("devtools")) {install.packages("devtools")}

pacman::p_load(
  tidyverse,     # packages ggplot2, dplyr, tidyr, readr, purrr, tibble, 
  # stringr, and forcats
  broom,         # functions tidy(), glance(), augment()
  fs,            # Cross-platform interface to file system operations
  glue,          # Glue strings to data in R
  here,          # Constructs paths to your project's files
  janitor,       # for working with dirty data 
  khroma,        # Colour Schemes for Scientific Data Visualization
  lubridate,     # Functions to work with date-times and time-spans 
  mice,          # Multiple imputation using Fully Conditional Specification
  naniar,        # structures, summaries, and visualisations for missing data 
  readxl,        # read in excel files
  scales,        # Scale functions for visualization
  install = FALSE
)

#### Other packages ----------------------------- 

library(lamisc)       # devtools::install_github("emilelatour/lamisc") 
library(latable)      # devtools::install_github("emilelatour/latable")
library(laviz)        # devtools::install_github("emilelatour/laviz") 
library(purposeful)   # devtools::install_github("emilelatour/purposeful")
library(redcaptools)  # devtools::install_github("emilelatour/redcaptools")


```

```{r}
#| label: "load-the-data"
#| include: false

library(palmerpenguins)

dplyr::glimpse(penguins)

```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber's Markdown syntax. 

Markdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read.


[Good reference for html in quarto here](https://quarto.org/docs/reference/formats/html.html).

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
head(penguins) |> 
  lamisc::flex_print()


```

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::

::: {.callout-tip}
## Tip with Title

This is an example of a callout with a title.
:::

::: {.callout-caution collapse="true"}
## Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::


::: {.callout-note appearance="simple"}

## Pay Attention

Using callouts is an effective way to highlight content that your reader give special consideration or attention.

:::

::: {.callout-note appearance="minimal"}

## Pay Attention

Using callouts is an effective way to highlight content that your reader give special consideration or attention.

:::


::: {.callout-note icon=false}

## Pay Attention

Using callouts is an effective way to highlight content that your reader give special consideration or attention.

:::

```{r}

ggplot(data = penguins, 
                       aes(x = flipper_length_mm,
                           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.2, 0.7),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot")
```


## Tabset 

::: {.panel-tabset}

### Penguin mass vs. flipper length

```{r}
ggplot(data = penguins, 
                       aes(x = flipper_length_mm,
                           y = body_mass_g)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.2, 0.7),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot") + 
  laviz::theme_laviz()
```


### Flipper length vs. bill length

```{r}
ggplot(data = penguins,
                         aes(x = flipper_length_mm,
                             y = bill_length_mm)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Flipper and bill length",
       subtitle = "Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER",
       x = "Flipper length (mm)",
       y = "Bill length (mm)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme(legend.position = c(0.85, 0.15),
        plot.title.position = "plot",
        plot.caption = element_text(hjust = 0, face= "italic"),
        plot.caption.position = "plot") + 
  laviz::theme_laviz()
```

:::


:::